From af7316a5b8baf9fc5b01bdd536be2c2cfc4cd2d0 Mon Sep 17 00:00:00 2001
From: Marek Kasik <mkasik@redhat.com>
Date: Wed, 29 Nov 2023 12:47:49 +0100
Subject: [PATCH] clipboard: Do not process received data after finalize

Since receiving some clipboard data can take some time, they could
be received after finalize of FrdpChannelClipboard. This could
lead to crash or data corruption because gtk3's gtk_clipboard_request_contents()
does not allow to use a GCancellable for such situation. So we need to check
"manually" whether the FrdpChannelClipboard was already finalized
when the data arrive. Since the GtkClipboard is the only object
which we know was not finalized I've implemented storing of info
about finalized FrdpChannelClipboards inside of the object.
This happens only when there is a request which was not
fulfilled yet in the time of finalize of FrdpChannelClipboard.
---
 src/frdp-channel-clipboard.c | 34 +++++++++++++++++++++++++++++++++-
 1 file changed, 33 insertions(+), 1 deletion(-)

diff --git a/src/frdp-channel-clipboard.c b/src/frdp-channel-clipboard.c
index 1d6814f..095db29 100644
--- a/src/frdp-channel-clipboard.c
+++ b/src/frdp-channel-clipboard.c
@@ -108,6 +108,8 @@ typedef struct
   GMutex                       fuse_mutex;
 
   fuse_ino_t                   current_inode;
+
+  guint                        contents_requests_count;
 } FrdpChannelClipboardPrivate;
 
 G_DEFINE_TYPE_WITH_PRIVATE (FrdpChannelClipboard, frdp_channel_clipboard, FRDP_TYPE_CHANNEL)
@@ -173,9 +175,20 @@ frdp_channel_clipboard_finalize (GObject *object)
 {
   FrdpChannelClipboard        *self = (FrdpChannelClipboard *) object;
   FrdpChannelClipboardPrivate *priv = frdp_channel_clipboard_get_instance_private (self);
+  GList                       *finalized_clipboards;
+  guint                        i;
 
   g_signal_handler_disconnect (priv->gtk_clipboard, priv->clipboard_owner_changed_id);
 
+  /* GtkClipboardReceivedFunc does not have cancellable so we need to handle
+     receiving of contents after finalize. */
+  if (priv->contents_requests_count > 0) {
+    finalized_clipboards = g_object_get_data (G_OBJECT (priv->gtk_clipboard), "finalized-clipboards");
+    for (i = 0; i < priv->contents_requests_count; i++)
+      finalized_clipboards = g_list_append (finalized_clipboards, self);
+    g_object_set_data (G_OBJECT (priv->gtk_clipboard), "finalized-clipboards", finalized_clipboards);
+  }
+
   g_hash_table_unref (priv->remote_files_requests);
   fuse_session_unmount (priv->fuse_session);
   fuse_session_exit (priv->fuse_session);
@@ -614,6 +627,7 @@ frdp_channel_clipboard_init (FrdpChannelClipboard *self)
   priv->clipboard_owner_changed_id = g_signal_connect (priv->gtk_clipboard, "owner-change", G_CALLBACK (clipboard_owner_change_cb), self);
   priv->fgdw_id = CB_FORMAT_TEXTURILIST;
   priv->current_inode = FUSE_ROOT_ID + 1;
+  priv->contents_requests_count = 0;
 
   argv[0] = "gnome-connections";
   argv[1] = "-d";
@@ -1275,15 +1289,28 @@ clipboard_content_received (GtkClipboard     *clipboard,
                             gpointer          user_data)
 {
   FrdpChannelClipboard        *self = (FrdpChannelClipboard *) user_data;
-  FrdpChannelClipboardPrivate *priv = frdp_channel_clipboard_get_instance_private (self);
+  FrdpChannelClipboardPrivate *priv;
   GdkPixbuf                   *pixbuf;
   GdkAtom                      data_type;
   guchar                      *data, *text;
   GError                      *error = NULL;
+  GList                       *finalized_clipboards;
   gsize                        text_length, buffer_size = 0;
   guint                        i;
   gint                         length;
 
+  finalized_clipboards = g_object_get_data (G_OBJECT (clipboard), "finalized-clipboards");
+  if (g_list_find (finalized_clipboards, self) != NULL) {
+    finalized_clipboards = g_list_remove (finalized_clipboards, self);
+    g_object_set_data (G_OBJECT (clipboard), "finalized-clipboards", finalized_clipboards);
+    return;
+  }
+
+  priv = frdp_channel_clipboard_get_instance_private (self);
+
+  if (priv->contents_requests_count > 0)
+    priv->contents_requests_count--;
+
   length = gtk_selection_data_get_length (selection_data);
   data_type = gtk_selection_data_get_data_type (selection_data);
 
@@ -1399,24 +1426,28 @@ server_format_data_request (CliprdrClientContext              *context,
                                       gdk_atom_intern ("UTF8_STRING", FALSE),
                                       clipboard_content_received,
                                       self);
+      priv->contents_requests_count++;
       break;
     case CB_FORMAT_PNG:
       gtk_clipboard_request_contents (priv->gtk_clipboard,
                                       gdk_atom_intern ("image/png", FALSE),
                                       clipboard_content_received,
                                       self);
+      priv->contents_requests_count++;
       break;
     case CB_FORMAT_JPEG:
       gtk_clipboard_request_contents (priv->gtk_clipboard,
                                       gdk_atom_intern ("image/jpeg", FALSE),
                                       clipboard_content_received,
                                       self);
+      priv->contents_requests_count++;
       break;
     case CF_DIB:
       gtk_clipboard_request_contents (priv->gtk_clipboard,
                                       gdk_atom_intern ("image/bmp", FALSE),
                                       clipboard_content_received,
                                       self);
+      priv->contents_requests_count++;
       break;
     default:
       if (format == priv->fgdw_id) {
@@ -1424,6 +1455,7 @@ server_format_data_request (CliprdrClientContext              *context,
                                         gdk_atom_intern ("text/uri-list", FALSE),
                                         clipboard_content_received,
                                         self);
+        priv->contents_requests_count++;
         break;
       } else {
         g_warning ("Requesting clipboard data of type %d not implemented.", format);
-- 
2.47.1

