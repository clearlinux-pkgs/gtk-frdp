From 5e3571beb7ea7e4187719dbb09ddb4c6a5a02969 Mon Sep 17 00:00:00 2001
From: Marek Kasik <mkasik@redhat.com>
Date: Fri, 10 Nov 2023 12:59:27 +0100
Subject: [PATCH] Add funtionality for handling of certificate verification

gtk-frdp emits signal "rdp-needs-certificate-verification"
when FreeRDP requests verification of a certificate
and the method which emitted it waits until
frdp_display_certificate_verify() is called. The GMainContext
iterates during the waiting.
The result is then passed to FreeRDP.

The same happens for reverification of changed certificate.
---
 src/frdp-display.c | 159 +++++++++++++++++++++++++++++++++++++++++++++
 src/frdp-display.h |  27 ++++++++
 src/frdp-session.c |  68 +++++++++++++------
 3 files changed, 234 insertions(+), 20 deletions(-)

diff --git a/src/frdp-display.c b/src/frdp-display.c
index 7f13772..5971e6d 100644
--- a/src/frdp-display.c
+++ b/src/frdp-display.c
@@ -28,6 +28,12 @@ struct _FrdpDisplayPrivate
 
   gboolean     allow_resize;
   gboolean     resize_supported;
+
+  gboolean     awaiting_certificate_verification;
+  gboolean     awaiting_certificate_change_verification;
+
+  guint        certificate_verification_value;
+  guint        certificate_change_verification_value;
 };
 
 G_DEFINE_TYPE_WITH_PRIVATE (FrdpDisplay, frdp_display, GTK_TYPE_DRAWING_AREA)
@@ -49,6 +55,8 @@ enum
   RDP_DISCONNECTED,
   RDP_NEEDS_AUTHENTICATION,
   RDP_AUTH_FAILURE,
+  RDP_NEEDS_CERTIFICATE_VERIFICATION,
+  RDP_NEEDS_CERTIFICATE_CHANGE_VERIFICATION,
   LAST_SIGNAL
 };
 
@@ -432,6 +440,35 @@ frdp_display_class_init (FrdpDisplayClass *klass)
                                             0, NULL, NULL, NULL,
                                             G_TYPE_NONE, 1,
                                             G_TYPE_STRING);
+
+  signals[RDP_NEEDS_CERTIFICATE_VERIFICATION] = g_signal_new ("rdp-needs-certificate-verification",
+                                                              G_TYPE_FROM_CLASS (klass),
+                                                              G_SIGNAL_RUN_LAST,
+                                                              0, NULL, NULL, NULL,
+                                                              G_TYPE_NONE, 7,
+                                                              G_TYPE_STRING,
+                                                              G_TYPE_UINT,
+                                                              G_TYPE_STRING,
+                                                              G_TYPE_STRING,
+                                                              G_TYPE_STRING,
+                                                              G_TYPE_STRING,
+                                                              G_TYPE_UINT);
+
+  signals[RDP_NEEDS_CERTIFICATE_CHANGE_VERIFICATION] = g_signal_new ("rdp-needs-certificate-change-verification",
+                                                                     G_TYPE_FROM_CLASS (klass),
+                                                                     G_SIGNAL_RUN_LAST,
+                                                                     0, NULL, NULL, NULL,
+                                                                     G_TYPE_NONE, 10,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_UINT,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_STRING,
+                                                                     G_TYPE_UINT);
 }
 
 static void
@@ -601,6 +638,128 @@ frdp_display_authenticate (FrdpDisplay *self,
   return klass->authenticate (self, username, password, domain);
 }
 
+guint
+frdp_display_certificate_verify_ex (FrdpDisplay *display,
+                                    const gchar *host,
+                                    guint16      port,
+                                    const gchar *common_name,
+                                    const gchar *subject,
+                                    const gchar *issuer,
+                                    const gchar *fingerprint,
+                                    DWORD        flags)
+{
+  FrdpDisplayPrivate *priv = frdp_display_get_instance_private (display);
+  GMainContext       *context;
+
+  g_signal_emit (display,
+                 signals[RDP_NEEDS_CERTIFICATE_VERIFICATION],
+                 0,
+                 host,
+                 port,
+                 common_name,
+                 subject,
+                 issuer,
+                 fingerprint,
+                 flags);
+
+  priv->awaiting_certificate_verification = TRUE;
+
+  context = g_main_context_default ();
+
+  while (priv->awaiting_certificate_verification)
+    g_main_context_iteration (context, FALSE);
+
+  return priv->certificate_verification_value;
+}
+
+guint
+frdp_display_certificate_change_verify_ex (FrdpDisplay *display,
+                                           const gchar *host,
+                                           guint16      port,
+                                           const gchar *common_name,
+                                           const gchar *subject,
+                                           const gchar *issuer,
+                                           const gchar *fingerprint,
+                                           const gchar *old_subject,
+                                           const gchar *old_issuer,
+                                           const gchar *old_fingerprint,
+                                           DWORD        flags)
+{
+  FrdpDisplayPrivate *priv = frdp_display_get_instance_private (display);
+  GMainContext       *context;
+
+  g_signal_emit (display, signals[RDP_NEEDS_CERTIFICATE_CHANGE_VERIFICATION], 0,
+                 host,
+                 port,
+                 common_name,
+                 subject,
+                 issuer,
+                 fingerprint,
+                 old_subject,
+                 old_issuer,
+                 old_fingerprint,
+                 flags);
+
+  priv->awaiting_certificate_change_verification = TRUE;
+
+  context = g_main_context_default ();
+
+  while (priv->awaiting_certificate_change_verification)
+    g_main_context_iteration (context, FALSE);
+
+  return priv->certificate_change_verification_value;
+}
+
+/**
+ * frdp_display_certificate_verify:
+ * @display: (transfer none): the RDP display widget
+ * @verification: verification value (1 - accept and store the certificate,
+ *                                    2 - accept the certificate for this session only
+ *                                    0 - otherwise)
+ *
+ * Finishes verification requested by FreeRDP.
+ */
+void
+frdp_display_certificate_verify (FrdpDisplay *display,
+                                 guint        verification)
+{
+  FrdpDisplayPrivate *priv = frdp_display_get_instance_private (display);
+
+  if (verification <= 2) {
+    priv->certificate_verification_value = verification;
+  }
+  else {
+    priv->certificate_verification_value = 0;
+    g_warning ("Verification value is out of allowed values.");
+  }
+  priv->awaiting_certificate_verification = FALSE;
+}
+
+/**
+ * frdp_display_certificate_change_verify:
+ * @display: (transfer none): the RDP display widget
+ * @verification: verification value (1 - accept and store the certificate,
+ *                                    2 - accept the certificate for this session only
+ *                                    0 - otherwise)
+ *
+ * Finishes verification requested by FreeRDP.
+ */
+void
+frdp_display_certificate_change_verify (FrdpDisplay *display,
+                                        guint        verification)
+{
+  FrdpDisplayPrivate *priv = frdp_display_get_instance_private (display);
+
+  if (verification <= 2) {
+    priv->certificate_change_verification_value = verification;
+  }
+  else {
+    priv->certificate_change_verification_value = 0;
+    g_warning ("Verification value is out of allowed values.");
+  }
+  priv->awaiting_certificate_change_verification = FALSE;
+}
+
 /**
  * frdp_display_get_pixbuf:
  * @display: (transfer none): the RDP display widget
diff --git a/src/frdp-display.h b/src/frdp-display.h
index 3551e4e..06dc4bc 100644
--- a/src/frdp-display.h
+++ b/src/frdp-display.h
@@ -53,6 +53,33 @@ gboolean   frdp_display_authenticate (FrdpDisplay *self,
                                       gchar **password,
                                       gchar **domain);
 
+guint      frdp_display_certificate_verify_ex (FrdpDisplay *self,
+                                               const gchar *host,
+                                               guint16      port,
+                                               const gchar *common_name,
+                                               const gchar *subject,
+                                               const gchar *issuer,
+                                               const gchar *fingerprint,
+                                               guint32      flags);
+
+guint      frdp_display_certificate_change_verify_ex (FrdpDisplay *self,
+                                                      const gchar *host,
+                                                      guint16      port,
+                                                      const gchar *common_name,
+                                                      const gchar *subject,
+                                                      const gchar *issuer,
+                                                      const gchar *fingerprint,
+                                                      const gchar *old_subject,
+                                                      const gchar *old_issuer,
+                                                      const gchar *old_fingerprint,
+                                                      guint32      flags);
+
+void       frdp_display_certificate_verify (FrdpDisplay *self,
+                                            guint        verification);
+
+void       frdp_display_certificate_change_verify (FrdpDisplay *self,
+                                                   guint        verification);
+
 GdkPixbuf *frdp_display_get_pixbuf (FrdpDisplay *display);
 
 G_END_DECLS
diff --git a/src/frdp-session.c b/src/frdp-session.c
index 7e46bff..a975048 100644
--- a/src/frdp-session.c
+++ b/src/frdp-session.c
@@ -355,30 +355,58 @@ frdp_session_draw (GtkWidget *widget,
   return TRUE;
 }
 
+/*
+ * Return 1 to accept and store a certificate, 2 to accept
+ * a certificate only for this session, 0 otherwise.
+ */
 static guint
-frdp_certificate_verify (freerdp     *freerdp_session,
-                         const gchar *common_name,
-                         const gchar* subject,
-                         const gchar* issuer,
-                         const gchar* fingerprint,
-                         gboolean     host_mismatch)
+frdp_certificate_verify_ex (freerdp     *freerdp_session,
+                            const gchar *host,
+                            guint16      port,
+                            const gchar *common_name,
+                            const gchar *subject,
+                            const gchar *issuer,
+                            const gchar *fingerprint,
+                            guint32      flags)
 {
-  /* TODO */
-  return TRUE;
+  FrdpSession *self = ((frdpContext *) freerdp_session->context)->self;
+
+  return frdp_display_certificate_verify_ex (FRDP_DISPLAY (self->priv->display),
+                                             host,
+                                             port,
+                                             common_name,
+                                             subject,
+                                             issuer,
+                                             fingerprint,
+                                             flags);
 }
 
 static guint
-frdp_changed_certificate_verify (freerdp     *freerdp_session,
-                                 const gchar *common_name,
-                                 const gchar *subject,
-                                 const gchar *issuer,
-                                 const gchar *new_fingerprint,
-                                 const gchar *old_subject,
-                                 const gchar *old_issuer,
-                                 const gchar *old_fingerprint)
+frdp_changed_certificate_verify_ex (freerdp     *freerdp_session,
+                                    const gchar *host,
+                                    guint16      port,
+                                    const gchar *common_name,
+                                    const gchar *subject,
+                                    const gchar *issuer,
+                                    const gchar *fingerprint,
+                                    const gchar *old_subject,
+                                    const gchar *old_issuer,
+                                    const gchar *old_fingerprint,
+                                    guint32      flags)
 {
-  /* TODO */
-  return TRUE;
+  FrdpSession *self = ((frdpContext *) freerdp_session->context)->self;
+
+  return frdp_display_certificate_change_verify_ex (FRDP_DISPLAY (self->priv->display),
+                                                    host,
+                                                    port,
+                                                    common_name,
+                                                    subject,
+                                                    issuer,
+                                                    fingerprint,
+                                                    old_subject,
+                                                    old_issuer,
+                                                    old_fingerprint,
+                                                    flags);
 }
 
 static gboolean
@@ -706,8 +734,8 @@ frdp_session_init_freerdp (FrdpSession *self)
   priv->freerdp_session->PostConnect = frdp_post_connect;
   priv->freerdp_session->PostDisconnect = frdp_post_disconnect;
   priv->freerdp_session->Authenticate = frdp_authenticate;
-  priv->freerdp_session->VerifyCertificate = frdp_certificate_verify;
-  priv->freerdp_session->VerifyChangedCertificate = frdp_changed_certificate_verify;
+  priv->freerdp_session->VerifyCertificateEx = frdp_certificate_verify_ex;
+  priv->freerdp_session->VerifyChangedCertificateEx = frdp_changed_certificate_verify_ex;
 
   priv->freerdp_session->ContextSize = sizeof (frdpContext);
 
-- 
2.47.1

